package kr.ac.ctc.kopo35.Dao;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.List;

import kr.ac.ctc.kopo35.Domain.ScoreItem;

public class ScoreItemDaoImpl implements ScoreItemDao {

	public ScoreItemDaoImpl() {
		try {
			Class.forName("com.mysql.cj.jdbc.Driver");	
		} catch (Exception e) {
			throw new IllegalStateException("jdbc 드라이버 로드 실패");	// 앱을 끝냄
		}
	}
	
	
	@Override
	public List<ScoreItem> selectAll(int startRecordNo, int countPerPage) {
		String sql = "select * from examtable limit ?, ?";
		List<ScoreItem> ScoreItems = new ArrayList<ScoreItem>();

		try (
				Connection conn = DriverManager.getConnection("jdbc:mysql://127.0.0.1:3306/kopoctc", "root", "abcd1234");
				PreparedStatement pstmt = conn.prepareStatement(sql);
			) {
			pstmt.setInt(1, startRecordNo);
			pstmt.setInt(2, countPerPage);
			try (ResultSet rset = pstmt.executeQuery();) {
				while (rset.next()) {
					ScoreItem scoreItem = new ScoreItem();
					scoreItem.setName(rset.getString("name"));
					scoreItem.setId(rset.getInt("studentid"));
					scoreItem.setKor(rset.getInt("kor"));
					scoreItem.setEng(rset.getInt("eng"));
					scoreItem.setMat(rset.getInt("mat"));
					
					ScoreItems.add(scoreItem);
				}
			}
		} catch (Exception e) {
			throw new IllegalStateException("db 연결 실패" + e.getMessage());
		}
		
		return ScoreItems;
	}

	
	@Override
	public int selectTotalCount() {

		String sql = "select count(*) from examtable";
		int result = 0;
		try (
				Connection conn = DriverManager.getConnection("jdbc:mysql://127.0.0.1/kopoctc", "root", "abcd1234");
				PreparedStatement pstmt = conn.prepareStatement(sql);
				ResultSet rs = pstmt.executeQuery();
			) {
			
			while (rs.next()) {
				result = rs.getInt(1);
			}
			
		} catch (Exception e) {
			throw new IllegalStateException("db 연결 실패" + e.getMessage());
		}
		
		return result;
	}
	
	
	@Override
	public List<ScoreItem> selectOne(int id) {
		String sql = "select * from examtable where studentid=?";
		List<ScoreItem> ScoreItems = new ArrayList<ScoreItem>();

		try (
				Connection conn = DriverManager.getConnection("jdbc:mysql://127.0.0.1:3306/kopoctc", "root", "abcd1234");
				PreparedStatement pstmt = conn.prepareStatement(sql);
			) {
			pstmt.setInt(1, id);
			try (ResultSet rset = pstmt.executeQuery();) {
				while(rset.next()) {
					ScoreItem scoreItem = new ScoreItem();
					scoreItem.setName(rset.getString("name"));
					scoreItem.setId(rset.getInt("studentid"));
					scoreItem.setKor(rset.getInt("kor"));
					scoreItem.setEng(rset.getInt("eng"));
					scoreItem.setMat(rset.getInt("mat"));
					
					ScoreItems.add(scoreItem);
				}
			}
		} catch (Exception e) {
			throw new IllegalStateException("db 연결 실패" + e.getMessage());
		}
		
		return ScoreItems;
	}


	@Override
	public int insertOne(int id) {
		
		return 0;
	}


	@Override
	public int updateOne(int id) {
		String sql = "update examtable set (name=?, studentid=?, kor=?, eng=?, mat=?)";
		int result = 0;

		try (
				Connection conn = DriverManager.getConnection("jdbc:mysql://127.0.0.1/kopoctc", "root", "abcd1234");
				PreparedStatement pstmt = conn.prepareStatement(sql);
				ResultSet rs = pstmt.executeQuery();
			) {
			
			while (rs.next()) {
				result = rs.getInt(1);
			}
		} catch (Exception e) {
			throw new IllegalStateException("db 연결 실패" + e.getMessage());
		}
		
		return ScoreItems;
	}


	@Override
	public int deleteOne(int id) {

		return 0;
	}
	
}
